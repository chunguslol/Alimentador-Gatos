const Alexa = require('ask-sdk-core');
const AWS = require('aws-sdk');
const IotData = new AWS.IotData({ endpoint: 'a10nhk4kc31osm-ats.iot.us-east-2.amazonaws.com' });
const DynamoDB = new AWS.DynamoDB.DocumentClient();

let objectName = '';
let userId = '';
// Define DynamoDB table name
const tableName = 'Users';

// Function to save object name in DynamoDB
async function saveObjectName() {
    const params = {
        TableName: tableName,
        Key: { idUser: userId },
        UpdateExpression: 'ADD objects :obj',
        ExpressionAttributeValues: { ':obj': DynamoDB.createSet([objectName]) }
    };
    return DynamoDB.update(params).promise();
}

// Function to get object names from DynamoDB
async function getObjectNames() {
    const params = {
        TableName: tableName,
        Key: { idUser: userId }
    };
    return DynamoDB.get(params).promise();
}

function getShadowParams() {
    const Shadow = {
        thingName: objectName,
    };
    return Shadow;
}

function turnOnMotor() {
    return {
        thingName: objectName,
        payload: '{"state": {"desired": {"builtInMotor": 2}}}',
    };
}

function getShadowPromise(params) {
    return new Promise((resolve, reject) => {
        IotData.getThingShadow(params, (err, data) => {
            if (err) {
                console.log(err, err.stack);
                reject(Failed to get thing shadow ${err.errorMessage});
            } else {
                resolve(JSON.parse(data.payload));
            }
        });
    });
}

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
    },
    async handle(handlerInput) {
        userId = handlerInput.requestEnvelope.session.user.userId;
        let speakOutput;

        try {
            const data = await getObjectNames();
            if (data.Item && data.Item.objects && data.Item.objects.values.length > 0) {
                objectName = data.Item.objects.values[0]; // Usa el primer objeto como predeterminado
                speakOutput = Bienvenido al alimentador de mascotas. Tu objeto actual es ${objectName}. Tambien puedes solicitar ayuda;
            } else {
                speakOutput = Bienvenido al alimentador de mascotas. No tienes ningun objeto registrado. Puedes solicitar ayuda;
            }
        } catch (err) {
            console.log(Error retrieving object names: ${err});
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
///////////////////////////////////////////////////////

const UpdateDistanceIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'UpdateDistanceIntent';
    },
    async handle(handlerInput) {
        const { distance } = handlerInput.requestEnvelope.request.intent.slots;
        let speakOutput = 'Error al actualizar la distancia.';

        if (distance && distance.value) {
            const newDistance = distance.value;
            let distancia = parseInt(newDistance)

            const updateShadowParams = {
                thingName: objectName,
                payload: {"state": {"desired": {"distanceToDetect": ${distancia}}}},
            };

            try {
                await IotData.updateThingShadow(updateShadowParams, function (err, data) {
                    if (err) console.log(err);
                });
                speakOutput = La distancia ha sido actualizada a ${newDistance} centimetros.;
            } catch (err) {
                console.log(Error updating distance: ${err});
                speakOutput = 'Hubo un error actualizando la distancia. Por favor, inténtelo de nuevo.';
            }
        } else {
            speakOutput = 'No se proporcionó una distancia válida.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const UpdateWeightIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'UpdateWeightIntent';
    },
    async handle(handlerInput) {
        const { weight } = handlerInput.requestEnvelope.request.intent.slots;
        let speakOutput = 'Error al actualizar el peso.';

        if (weight && weight.value) {
            const newWeight = weight.value;

            const updateShadowParams = {
                thingName: objectName,
                payload: JSON.stringify({
                    state: {
                        desired: {
                            weightToFull: parseInt(newWeight)
                        }
                    }
                })
            };

            try {
                await IotData.updateThingShadow(updateShadowParams);
                speakOutput = El peso ha sido actualizado a ${newWeight} gramos.;
            } catch (err) {
                console.log(Error updating weight: ${err});
                speakOutput = 'Hubo un error actualizando el peso. Por favor, inténtelo de nuevo.';
            }
        } else {
            speakOutput = 'No se proporcionó un peso válido.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

//////////////////////////////////////////////////////

const StatePlateIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'StatePlateIntent';
    },
    async handle(handlerInput) {
        let stateDish = 'unknown';
        await getShadowPromise(getShadowParams()).then((result) => stateDish = result.state.reported.stateDish);
        console.log(stateDish);

        let speakOutput = 'Error';
        if (stateDish == "Void") {
            speakOutput = 'El plato está vacío.';
        } else if (stateDish == "Full") {
            speakOutput = 'El plato está lleno.';
        } else {
            speakOutput = 'No se pudo consultar el estado del plato, por favor intente más tarde.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const StateIntentCatHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'StateIntentCat';
    },
    async handle(handlerInput) {
        let stateDish = 'unknown';
        await getShadowPromise(getShadowParams()).then((result) => stateDish = result.state.reported.cat);
        console.log(stateDish);

        let speakOutput = 'Error';
        if (stateDish == "close") {
            speakOutput = 'El gato está cerca.';
        } else if (stateDish == "away") {
            speakOutput = 'El gato está lejos.';
        } else {
            speakOutput = 'No se pudo consultar dónde está el gato, por favor intente más tarde.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const TurnOnIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'TurnOnIntent';
    },
    async handle(handlerInput) {
        userId = handlerInput.requestEnvelope.session.user.userId;
        const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
        let speakOutput = "Error";

        // Si ya se ha seleccionado un objeto en la sesión
        if (sessionAttributes.selectedObject) {
            objectName = sessionAttributes.selectedObject;

            let stateDish = "unknown";
            await getShadowPromise(getShadowParams()).then((result) => stateDish = result.state.reported.stateDish);
            if (stateDish !== "Full") {
                IotData.updateThingShadow(turnOnMotor(), function (err, data) {
                    if (err) console.log(err);
                });
                speakOutput = Encendiendo ${objectName}!;
            } else {
                speakOutput = 'No se puede encender, porque el plato está lleno.';
            }

        } else {
            // Obtener los objetos del usuario
            try {
                const data = await getObjectNames();
                if (data.Item && data.Item.objects && data.Item.objects.values.length > 0) {
                    const objects = data.Item.objects.values;
                    sessionAttributes.objects = objects; // Almacenar los objetos en la sesión
                    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);

                    speakOutput = Tienes los siguientes objetos registrados: ${objects.join(', ')}. ¿Cuál quieres encender?;
                } else {
                    speakOutput = 'No tienes ningún objeto registrado. ¿Quieres registrar uno nuevo?';
                }
            } catch (err) {
                console.log(Error retrieving object names: ${err});
                speakOutput = 'Hubo un error al recuperar los nombres de los objetos. Por favor, inténtelo de nuevo.';
            }
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};



const RegisterIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'RegisterIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'Para registrar un objeto diga, el nombre del objeto es, y el nombre del objeto, o diga, el nombre es, y el nombre del objeto.';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const HelpIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'Tienes estas opciones, encender, registrar un dispositivo, preguntar por la lista de objetos, y preguntar cual es el estado de un objeto.';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && (Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.CancelIntent'
                || Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speakOutput = '¡Adiós!';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};

const FallbackIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.FallbackIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'Sorry, I don\'t know about that. Please try again.';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        console.log(~~~~ Session ended: ${JSON.stringify(handlerInput.requestEnvelope)});
        return handlerInput.responseBuilder.getResponse();
    }
};

const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = Alexa.getIntentName(handlerInput.requestEnvelope);
        const speakOutput = Haz intentado ejecutar ${intentName};

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};

const ListObjectsIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'ListObjectsIntent';
    },
    async handle(handlerInput) {
        userId = handlerInput.requestEnvelope.session.user.userId;
        let speakOutput = 'No tienes ningún objeto registrado.';

        try {
            const data = await getObjectNames();
            if (data.Item && data.Item.objects && data.Item.objects.values.length > 0) {
                const objects = data.Item.objects.values;
                speakOutput = Tienes los siguientes objetos registrados: ${objects.join(', ')}.;
            }
        } catch (err) {
            console.log(Error retrieving object names: ${err});
            speakOutput = 'Hubo un error al recuperar los nombres de los objetos. Por favor, inténtelo de nuevo.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const SetThingNameIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'SetThingNameIntent';
    },
    async handle(handlerInput) {
        userId = handlerInput.requestEnvelope.session.user.userId;
        const { thingNameSlot } = handlerInput.requestEnvelope.request.intent.slots;
        let speakOutput = PRUEBA, ${thingNameSlot.value};

        if (thingNameSlot && thingNameSlot.value) {
            objectName = thingNameSlot.value;

            try {
                await saveObjectName();
                speakOutput = El objeto ${objectName} ha sido registrado;
            } catch (err) {
                console.log(Error saving object name: ${err});
                speakOutput = 'Hubo un error guardando el nombre del objeto. Por favor, inténtelo de nuevo.';
            }
        } else {
            speakOutput = 'El objeto no tiene nombre.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const SelectObjectIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'SelectObjectIntent';
    },
    async handle(handlerInput) {
        const { objectSlot } = handlerInput.requestEnvelope.request.intent.slots;
        let speakOutput = 'Error';

        if (objectSlot && objectSlot.value) {
            const selectedObject = objectSlot.value;
            const userId = handlerInput.requestEnvelope.session.user.userId;

            try {
                // Obtener los objetos del usuario
                const data = await getObjectNames(userId);
                if (data.Item && data.Item.objects && data.Item.objects.values.length > 0) {
                    const objects = data.Item.objects.values;

                    if (objects.includes(selectedObject)) {
                        // Objeto encontrado, almacenarlo en la sesión
                        const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
                        sessionAttributes.selectedObject = selectedObject;
                        handlerInput.attributesManager.setSessionAttributes(sessionAttributes);

                        speakOutput = Has seleccionado ${selectedObject}. Ahora puedes decir "enciende" para encender el objeto.;
                    } else {
                        speakOutput = No encontré el objeto ${selectedObject} en tu lista de objetos registrados. Por favor, intenta con otro objeto.;
                    }
                } else {
                    speakOutput = 'No tienes ningún objeto registrado. ¿Quieres registrar uno nuevo?';
                }
            } catch (err) {
                console.log(Error retrieving object names: ${err});
                speakOutput = 'Hubo un error al recuperar los nombres de los objetos. Por favor, inténtelo de nuevo.';
            }
        } else {
            speakOutput = 'No mencionaste un objeto. Por favor, intenta de nuevo.';
        }

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        let speakOutput = 'Sorry, I had trouble doing what you asked. Please try again.';
        if (objectName === '') {
            speakOutput = 'No registró un objeto. Para registrarlo, diga: el objeto se llama y el nombre del objeto.';
        }

        console.log(~~~~ Error handled: ${JSON.stringify(error)});

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        StatePlateIntentHandler,
        StateIntentCatHandler,
        TurnOnIntentHandler,
        UpdateDistanceIntentHandler,
        UpdateWeightIntentHandler, 
        RegisterIntentHandler,
        HelpIntentHandler,
        CancelAndStopIntentHandler,
        FallbackIntentHandler,
        SessionEndedRequestHandler,
        SetThingNameIntentHandler,
        ListObjectsIntentHandler,
        SelectObjectIntentHandler,
        IntentReflectorHandler)
    .addErrorHandlers(
        ErrorHandler
    )
    .withCustomUserAgent('sample/hello-world/v1.2')
    .lambda();